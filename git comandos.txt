comandos git.

git // salen los comandos de git
git --version // sale cual ha sido la ultima version
git -v // sale lo mismo la ultima version pero es abreviado
git -h // para revisar lo mismo que en git que es git help pero solo abreviado con git -h lista de comandos
ls // listado de todos los directorios en la carpeta donde estamos
cd "downloads/" //es para moverse a otro directorio o carpeta dentro de la que estamos
cd .. //para movernos hacia atras de una carpeta, para regresarnos
pwd // para observar cual es el lugar directorio en donde estamos ubicados
mkdir " " entre comillas el nombre de carpeta para crear carpeta
//quiero eliminar la carpeta y ponerle otro nombre
// o podria cambiarle el nombre pero anexare los comandos para eliminar una carpeta 
// y para eliminar un archivo

git rm miarchivo.php //para eliminar un archivo
git rm -r micarpeta //para eliminar una carpeta

mv //para cambiar de nombre un archivo por ejemplo y reemplazar una carpeta estando afuera de ella
mv HelloWorld HelloGit //solo dejando un espacio y cambiando el nombre que uno desea

para iniciar la configuracion es:
git config --global user.name " "
git config --global user.email " "

touch hellogit.py   //se crea un archivo py para el directorio del folder hellogit para trabajar en el 
ahora 
git init //para inicializar el proyecto en la carpeta
git branch -m main// para cambiar el nombre de master a main

git status
git add
git commit -m " " //commit con -m es para el mensaje del commit y colocar entrecomillas el mensaje
git log para ver los commit

git checkout // y el archivo que quieras regresar de sus cambios a como estaba despues de haberse solo modificado
// con git checkout puedes volver al commit anterior y trabajar en el sin ver los demas como HEAD

git checkout tags/clase1 // y asi me movi hacia al tag sin escribir el codigo, con el puro tag puedo moverme

git reset // te dice cuales archivos son modificados y pueden cambiarse a como estaban antes con git checkout
// pero git reset tengo entendido es para llegar al ultimo status que estaba, volver para atras a la ultima fotografia
a como estaba en el ultimo commit

git log --graph  // se observa en vertical el dibujito de la rama hacia donde va
git log --graph --pretty=oneline //graph pero resumido corto
git log --graph --decorate --all --oneline ///resumido los 7 numeros en linea 

git config --global alias.tree "log --graph --decorate --all --oneline" //ese alias sera un comando resumido al decir tree
//ahora el alias tree significa todo lo del graph o la instruccion 
que yo desee git tree = git log --graph --decorate --all --oneline



touch .gitignore //Fichero creado pero para los ficheros que no querramos que aparescan para a単adir y no vuelvan a aparecer
// se agrega por ejemplo el .DS_store //asi:   **/.DS_store

git diff //para ver cambios que se hayan realizado de algun archivo o fichero, 
//antes de hacer el commit podemos ver que hemos ido cambiando

git reset --hard y los 7 numeros codigo commit//te regresa a un commit al que querias trabajar pero 
"eliminando lo de despues de", se puede regresar al ultimo trabajo haciendo un reset con el  ultimo
pero necesitas los 7 numeros para poder regresar


 git reflog //Historial completo de interacciones

git tag //clase1// por ejemplo clase1, se agrega al commit un tag aparte de su comentario, depende de tu ubic en head

git add . //se a単aden todos los archivos que se hayan modificado o creado

descubriendo errores, si quiero cambiarme con checkout a otro commit para trabajar,
necesit primero a単adir y hacer commit pendientes o eliminar a単adidos y untrackeados
para eliminar untrackeados el comando es:
git clean -f //remueve todo lo untrackeado

git branch login //creacion de rama login

git switch login //mas que claro no?

git merge //Cambios de rama , a main, o master, pero sin datos en staged o pendientes.

git stash // para guardar algo sin hacer un commit letras pendientes, etc sin add. ni commit y te deja cambiar de rama

git stash drop //eliminando el stash

git branch -d //-d y nombre de la rama y se elimina
gitreflog //para ver todos los movimientos de checkout reset, commit, merge, ramas

.ssh en github

git remote add origin //y el linkde git@github.com:chudopie/ //y nombre del archivo

git push -u origin main

git fetch descarga en local el historial de cambio, pero sin descargarse los cambios.

